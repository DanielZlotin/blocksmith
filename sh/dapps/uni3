#!/bin/zsh
set -euo pipefail

chainId=$1
nft=$2
tokenId=$3

unset ETH_KEYSTORE_ACCOUNT
source setchain $chainId

owner=$(cast call $nft "ownerOf(uint256)(address)" $tokenId)
position=$(cast call $nft "positions(uint256)(uint96, address, address, address, uint24, int24, int24, uint128, uint256, uint256, uint128, uint128)" $tokenId)
token0=$(echo $position | sed -n '3p' | cut -d " " -f1)
token1=$(echo $position | sed -n '4p' | cut -d " " -f1)
fee=$(echo $position | sed -n '5p' | cut -d " " -f1)
tickLower=$(echo $position | sed -n "6p" | cut -d' ' -f1)
tickUpper=$(echo $position | sed -n "7p" | cut -d' ' -f1)
liquidity=$(echo $position | sed -n "8p" | cut -d' ' -f1)
feeGrowthInside0LastX128=$(echo $position | sed -n "9p" | cut -d' ' -f1)
feeGrowthInside1LastX128=$(echo $position | sed -n "10p" | cut -d' ' -f1)

token0Decimals=$(cast call $token0 "decimals()(uint256)")
token1Decimals=$(cast call $token1 "decimals()(uint256)")
token0Symbol=$(cast call $token0 "symbol()(string)")
token1Symbol=$(cast call $token1 "symbol()(string)")
factory=$(cast call $nft "factory()(address)")
pool=$(cast call $factory "getPool(address,address,uint24)(address)" $token0 $token1 $fee)

slot0=$(cast call $pool "slot0()(uint160,int24)")
tick=$(echo $slot0 | sed -n '2p' | cut -d " " -f1)

MAX_UINT128=340282366920938463463374607431768211455
fees=$(cast call $nft "collect((uint256,address,uint128,uint128))(uint256,uint256)" "($tokenId,$owner,$MAX_UINT128,$MAX_UINT128)" --from $owner)
fees0=$(echo $fees | sed -n '1p' | cut -d " " -f1)
fees1=$(echo $fees | sed -n '2p' | cut -d " " -f1)

sqrtPriceL=$(bc -l <<< "scale=18; sqrt(1.0001^$tickLower)")
sqrtPriceH=$(bc -l <<< "scale=18; sqrt(1.0001^$tickUpper)")
sqrtPrice=$(bc -l <<< "scale=18; sqrt(1.0001^$tick)")

if (( tick < tickLower )); then
  amount1=0
  amount0=$(bc -l <<< "scale=18; $liquidity * ($sqrtPriceH - $sqrtPriceL) / ($sqrtPriceL * $sqrtPriceH)")
elif (( tick >= tickUpper )); then
  amount0=0
  amount1=$(bc -l <<< "scale=18; $liquidity * ($sqrtPriceH - $sqrtPriceL)")
else
  amount0=$(bc -l <<< "scale=18; $liquidity * ($sqrtPriceH - $sqrtPrice) / ($sqrtPrice * $sqrtPriceH)")
  amount1=$(bc -l <<< "scale=18; $liquidity * ($sqrtPrice - $sqrtPriceL)")
fi

amount0=$(bc -l <<< "scale=0; $amount0 / 1")
amount1=$(bc -l <<< "scale=0; $amount1 / 1")
amount0ui=$(bc -l <<< "scale=$token0Decimals; $amount0 / (10^$token0Decimals)")
amount1ui=$(bc -l <<< "scale=$token1Decimals; $amount1 / (10^$token1Decimals)")

fees0=$(bc -l <<< "scale=0; $fees0 / 1")
fees1=$(bc -l <<< "scale=0; $fees1 / 1")
fees0ui=$(bc -l <<< "scale=$token0Decimals; $fees0 / (10^$token0Decimals)")
fees1ui=$(bc -l <<< "scale=$token1Decimals; $fees1 / (10^$token1Decimals)")

jq -n "{symbol0:$token0Symbol,symbol1:$token1Symbol,
token0:\"$token0\",token1:\"$token1\",
amount0ui:$amount0ui,amount1ui:$amount1ui,
claimable0ui:$fees0ui,claimable1ui:$fees1ui,
amount0:\"$amount0\",amount1:\"$amount1\",
claimable0:\"$fees0\",claimable1:\"$fees1\"}"

